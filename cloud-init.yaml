#cloud-config
# パッケージのアップデートおよびアップグレード
package_update: true
package_upgrade: true
package_reboot_if_required: false

# rootユーザーを無効にしない
disable_root: false

# ホスト名の設定
hostname: proxmox
fqdn: proxmox.local

# デフォルトの「admin」Debianユーザーを無効にする
users: []

# インストールするパッケージの指定
packages:
 - dnsmasq
 - patch

# 指定されたファイルを書き込む
write_files:
  - path: /run/scheduler.patch
    owner: root:root
    permissions: '0644'
    content: |
      --- ifupdown2/ifupdown/scheduler-old.py	2022-10-07 16:34:42.000000000 +1300
      +++ ifupdown2/ifupdown/scheduler.py	2022-10-07 16:34:44.000000000 +1300
      @@ -127,15 +127,19 @@
      
               if ifupdownobj.config.get('addon_scripts_support', '0') == '1':
                   # /etc/network/ スクリプトを実行する
      -            os.environ['IFACE'] = ifaceobj.name if ifaceobj.name else ''
      -            os.environ['LOGICAL'] = ifaceobj.name if ifaceobj.name else ''
      -            os.environ['METHOD'] = ifaceobj.addr_method if ifaceobj.addr_method else ''
      -            os.environ['ADDRFAM'] = ','.join(ifaceobj.addr_family) if ifaceobj.addr_family else ''
      +            command_env = (cenv or {}).copy()
      +            command_env.update({
      +                'IFACE': ifaceobj.name if ifaceobj.name else '',
      +                'LOGICAL': ifaceobj.name if ifaceobj.name else '',
      +                'METHOD': ifaceobj.addr_method if ifaceobj.addr_method else '',
      +                'ADDRFAM': ','.join(ifaceobj.addr_family) if ifaceobj.addr_family else '',
      +            })
      +
                   for mname in ifupdownobj.script_ops.get(op, []):
                       ifupdownobj.logger.debug('%s: %s : running script %s'
                           %(ifacename, op, mname))
                       try:
      -                    utils.exec_command(mname, env=cenv)
      +                    utils.exec_command(mname, env=command_env)
                       except Exception as e:
                           if "permission denied" in str(e).lower():
                               ifupdownobj.logger.warning('%s: %s %s' % (ifacename, op, str(e)))

  # vmbr0インターフェース用のDHCPサーバーの設定
  - path: /etc/dnsmasq.conf
    owner: root:root
    permissions: '0644'
    content: |
      interface=vmbr0
      dhcp-range=10.10.10.2,10.10.10.254,12h
      dhcp-option=3,10.10.10.1

# サーバ起動時に実行するコマンド:
bootcmd:
  # IPv6の無効化
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1

# 最初の起動時にのみ実行するコマンド:
runcmd:
  - export DEBIAN_FRONTEND=noninteractive
  # Proxmoxのリポジトリを追加 (Debian 12/Bookworm用)
  - echo "deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription" > /etc/apt/sources.list.d/pve-install-repo.list
  - wget https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
  - apt update && apt full-upgrade -y
  - echo "postfix postfix/main_mailer_type string 'Internet Site'" | debconf-set-selections
  # 古い設定ファイルを保持 (EC2のシリアルコンソールを壊さないため)
  - apt install proxmox-ve postfix open-iscsi -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y
  # ifupdown2を修正して、フックスクリプトに環境変数を渡せるようにする
  - patch /usr/share/ifupdown2/ifupdown/scheduler.py /run/scheduler.patch && rm /run/scheduler.patch
  # ifupdown2が"ADDRFAM=inet,inet6"をpre-/post-hookに渡すので、それらを修正して対応する
  - sed -i'' -e 's/ inet6 / inet,inet6 /' /etc/network/if-pre-up.d/cloud_inet6 /etc/network/if-post-down.d/cloud_inet6
  # Proxmoxのifupdown2はsource-directoryをサポートしていないためsourceを使用し、vmbr0のためにゲストのNAT設定を追加
  - export LOCAL_NET_INTERFACE=$(ip -o link show | grep $(cloud-init query ds.meta_data.mac) | awk '{print $2}' | sed 's/:$//')
  - |
    echo "
    # /etc/network/interfaces.d/からのファイルを読み込む:
    source /etc/network/interfaces.d/*
    
    # Cloudイメージは新しく追加されたインターフェース用に動的に設定フラグメントを生成する
    # /etc/udev/rules.d/75-cloud-ifupdown.rules と /etc/network/cloud-ifupdown-helper を参照
    # 動的に生成される設定フラグメントは /run に格納される:
    source /run/network/interfaces.d/*
    auto lo
    iface lo inet loopback

    auto eth0
    iface eth0 inet dhcp
    
    auto vmbr0
    iface vmbr0 inet static
    # ゲスト用のNATネットワーク
        address  10.10.10.1/24
        bridge-ports none
        bridge-stp off
        bridge-fd 0
    
        post-up   echo 1 > /proc/sys/net/ipv4/ip_forward
        post-up   iptables -t nat -A POSTROUTING -s '10.10.10.0/24' -o ${LOCAL_NET_INTERFACE} -j MASQUERADE
        post-down iptables -t nat -D POSTROUTING -s '10.10.10.0/24' -o ${LOCAL_NET_INTERFACE} -j MASQUERADE
    " > /etc/network/interfaces
  - systemctl restart networking.service
  - systemctl start pveproxy
  - systemctl enable pveproxy
  # EC2インスタンスのプライベートIPを取得して /etc/hosts に追加
  - PRIVATE_IP=$(ip addr show ens5 | grep inet | awk '{ print $2 }' | cut -d'/' -f1 | head -n 1)
  - echo "$PRIVATE_IP proxmox" >> /etc/hosts

  # Proxmoxの証明書を更新
  - pvecm updatecerts --force
